// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Pay68Client is the client API for Pay68 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Pay68Client interface {
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
}

type pay68Client struct {
	cc grpc.ClientConnInterface
}

func NewPay68Client(cc grpc.ClientConnInterface) Pay68Client {
	return &pay68Client{cc}
}

func (c *pay68Client) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, "/pb.Pay68/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Pay68Server is the server API for Pay68 service.
// All implementations must embed UnimplementedPay68Server
// for forward compatibility
type Pay68Server interface {
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	mustEmbedUnimplementedPay68Server()
}

// UnimplementedPay68Server must be embedded to have forward compatible implementations.
type UnimplementedPay68Server struct {
}

func (UnimplementedPay68Server) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedPay68Server) mustEmbedUnimplementedPay68Server() {}

// UnsafePay68Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Pay68Server will
// result in compilation errors.
type UnsafePay68Server interface {
	mustEmbedUnimplementedPay68Server()
}

func RegisterPay68Server(s grpc.ServiceRegistrar, srv Pay68Server) {
	s.RegisterService(&Pay68_ServiceDesc, srv)
}

func _Pay68_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Pay68Server).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Pay68/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Pay68Server).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pay68_ServiceDesc is the grpc.ServiceDesc for Pay68 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pay68_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Pay68",
	HandlerType: (*Pay68Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _Pay68_CreateWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
