// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: transactions.sql

package db

import (
	"context"
)

const addTxn = `-- name: AddTxn :one
INSERT INTO transactions (
    wallet_address,
    chain,
    chain_id,
    txn_hash,
    from_add,
    to_add
) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, wallet_address, chain, chain_id, txn_hash, from_add, to_add
`

type AddTxnParams struct {
	WalletAddress string `json:"wallet_address"`
	Chain         string `json:"chain"`
	ChainID       int32  `json:"chain_id"`
	TxnHash       string `json:"txn_hash"`
	FromAdd       string `json:"from_add"`
	ToAdd         string `json:"to_add"`
}

func (q *Queries) AddTxn(ctx context.Context, arg AddTxnParams) (Transactions, error) {
	row := q.queryRow(ctx, q.addTxnStmt, addTxn,
		arg.WalletAddress,
		arg.Chain,
		arg.ChainID,
		arg.TxnHash,
		arg.FromAdd,
		arg.ToAdd,
	)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.WalletAddress,
		&i.Chain,
		&i.ChainID,
		&i.TxnHash,
		&i.FromAdd,
		&i.ToAdd,
	)
	return i, err
}

const getAllTxn = `-- name: GetAllTxn :many
SELECT id, wallet_address, chain, chain_id, txn_hash, from_add, to_add FROM transactions
WHERE wallet_address = $1 AND chain = $2
`

type GetAllTxnParams struct {
	WalletAddress string `json:"wallet_address"`
	Chain         string `json:"chain"`
}

func (q *Queries) GetAllTxn(ctx context.Context, arg GetAllTxnParams) ([]Transactions, error) {
	rows, err := q.query(ctx, q.getAllTxnStmt, getAllTxn, arg.WalletAddress, arg.Chain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transactions
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.WalletAddress,
			&i.Chain,
			&i.ChainID,
			&i.TxnHash,
			&i.FromAdd,
			&i.ToAdd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneTxn = `-- name: GetOneTxn :one
SELECT id, wallet_address, chain, chain_id, txn_hash, from_add, to_add FROM transactions
WHERE txn_hash = $1
LIMIT 1
`

func (q *Queries) GetOneTxn(ctx context.Context, txnHash string) (Transactions, error) {
	row := q.queryRow(ctx, q.getOneTxnStmt, getOneTxn, txnHash)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.WalletAddress,
		&i.Chain,
		&i.ChainID,
		&i.TxnHash,
		&i.FromAdd,
		&i.ToAdd,
	)
	return i, err
}
