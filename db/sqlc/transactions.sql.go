// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: transactions.sql

package db

import (
	"context"
	"time"
)

const addTxn = `-- name: AddTxn :one
INSERT INTO transactions (
    wallet_address,
    chain,
    chain_id,
    txn_hash,
    from_address,
    to_address,
    block_created_at,
    block,
    status, 
    created_at,
    sequence,
    type,
    fee,
    metadata
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) RETURNING txn_hash
`

type AddTxnParams struct {
	WalletAddress  string    `json:"wallet_address"`
	Chain          string    `json:"chain"`
	ChainID        int32     `json:"chain_id"`
	TxnHash        string    `json:"txn_hash"`
	FromAddress    string    `json:"from_address"`
	ToAddress      string    `json:"to_address"`
	BlockCreatedAt time.Time `json:"block_created_at"`
	Block          int32     `json:"block"`
	Status         string    `json:"status"`
	CreatedAt      time.Time `json:"created_at"`
	Sequence       int32     `json:"sequence"`
	Type           string    `json:"type"`
	Fee            string    `json:"fee"`
	Metadata       string    `json:"metadata"`
}

func (q *Queries) AddTxn(ctx context.Context, arg AddTxnParams) (string, error) {
	row := q.queryRow(ctx, q.addTxnStmt, addTxn,
		arg.WalletAddress,
		arg.Chain,
		arg.ChainID,
		arg.TxnHash,
		arg.FromAddress,
		arg.ToAddress,
		arg.BlockCreatedAt,
		arg.Block,
		arg.Status,
		arg.CreatedAt,
		arg.Sequence,
		arg.Type,
		arg.Fee,
		arg.Metadata,
	)
	var txn_hash string
	err := row.Scan(&txn_hash)
	return txn_hash, err
}

const getAllTxn = `-- name: GetAllTxn :many
SELECT id, wallet_address, chain, chain_id, txn_hash, from_address, to_address, block_created_at, block, status, created_at, sequence, type, fee, metadata FROM transactions
WHERE wallet_address = $1 AND chain_id = $2
`

type GetAllTxnParams struct {
	WalletAddress string `json:"wallet_address"`
	ChainID       int32  `json:"chain_id"`
}

func (q *Queries) GetAllTxn(ctx context.Context, arg GetAllTxnParams) ([]Transactions, error) {
	rows, err := q.query(ctx, q.getAllTxnStmt, getAllTxn, arg.WalletAddress, arg.ChainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transactions
	for rows.Next() {
		var i Transactions
		if err := rows.Scan(
			&i.ID,
			&i.WalletAddress,
			&i.Chain,
			&i.ChainID,
			&i.TxnHash,
			&i.FromAddress,
			&i.ToAddress,
			&i.BlockCreatedAt,
			&i.Block,
			&i.Status,
			&i.CreatedAt,
			&i.Sequence,
			&i.Type,
			&i.Fee,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneTxn = `-- name: GetOneTxn :one
SELECT id, wallet_address, chain, chain_id, txn_hash, from_address, to_address, block_created_at, block, status, created_at, sequence, type, fee, metadata FROM transactions
WHERE txn_hash = $1 AND chain_id = $2
LIMIT 1
`

type GetOneTxnParams struct {
	TxnHash string `json:"txn_hash"`
	ChainID int32  `json:"chain_id"`
}

func (q *Queries) GetOneTxn(ctx context.Context, arg GetOneTxnParams) (Transactions, error) {
	row := q.queryRow(ctx, q.getOneTxnStmt, getOneTxn, arg.TxnHash, arg.ChainID)
	var i Transactions
	err := row.Scan(
		&i.ID,
		&i.WalletAddress,
		&i.Chain,
		&i.ChainID,
		&i.TxnHash,
		&i.FromAddress,
		&i.ToAddress,
		&i.BlockCreatedAt,
		&i.Block,
		&i.Status,
		&i.CreatedAt,
		&i.Sequence,
		&i.Type,
		&i.Fee,
		&i.Metadata,
	)
	return i, err
}
