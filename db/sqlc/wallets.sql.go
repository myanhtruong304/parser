// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: wallets.sql

package db

import (
	"context"
	"database/sql"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (
    wallet_address,
    created_block
) VALUES ($1, $2) RETURNING id, wallet_address, created_block, created_at
`

type CreateWalletParams struct {
	WalletAddress string         `json:"wallet_address"`
	CreatedBlock  sql.NullString `json:"created_block"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallets, error) {
	row := q.queryRow(ctx, q.createWalletStmt, createWallet, arg.WalletAddress, arg.CreatedBlock)
	var i Wallets
	err := row.Scan(
		&i.ID,
		&i.WalletAddress,
		&i.CreatedBlock,
		&i.CreatedAt,
	)
	return i, err
}

const getListWallet = `-- name: GetListWallet :many
SELECT wallet_address FROM wallets
`

func (q *Queries) GetListWallet(ctx context.Context) ([]string, error) {
	rows, err := q.query(ctx, q.getListWalletStmt, getListWallet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var wallet_address string
		if err := rows.Scan(&wallet_address); err != nil {
			return nil, err
		}
		items = append(items, wallet_address)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
