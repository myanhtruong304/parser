// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addBlockStmt, err = db.PrepareContext(ctx, addBlock); err != nil {
		return nil, fmt.Errorf("error preparing query AddBlock: %w", err)
	}
	if q.addTxnStmt, err = db.PrepareContext(ctx, addTxn); err != nil {
		return nil, fmt.Errorf("error preparing query AddTxn: %w", err)
	}
	if q.createWalletStmt, err = db.PrepareContext(ctx, createWallet); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWallet: %w", err)
	}
	if q.getAllBlockStmt, err = db.PrepareContext(ctx, getAllBlock); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllBlock: %w", err)
	}
	if q.getAllTxnStmt, err = db.PrepareContext(ctx, getAllTxn); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllTxn: %w", err)
	}
	if q.getListWalletStmt, err = db.PrepareContext(ctx, getListWallet); err != nil {
		return nil, fmt.Errorf("error preparing query GetListWallet: %w", err)
	}
	if q.getNotProcessBlockStmt, err = db.PrepareContext(ctx, getNotProcessBlock); err != nil {
		return nil, fmt.Errorf("error preparing query GetNotProcessBlock: %w", err)
	}
	if q.getOneBlockStmt, err = db.PrepareContext(ctx, getOneBlock); err != nil {
		return nil, fmt.Errorf("error preparing query GetOneBlock: %w", err)
	}
	if q.getOneTxnStmt, err = db.PrepareContext(ctx, getOneTxn); err != nil {
		return nil, fmt.Errorf("error preparing query GetOneTxn: %w", err)
	}
	if q.updateBlockProcessStmt, err = db.PrepareContext(ctx, updateBlockProcess); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBlockProcess: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addBlockStmt != nil {
		if cerr := q.addBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addBlockStmt: %w", cerr)
		}
	}
	if q.addTxnStmt != nil {
		if cerr := q.addTxnStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addTxnStmt: %w", cerr)
		}
	}
	if q.createWalletStmt != nil {
		if cerr := q.createWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWalletStmt: %w", cerr)
		}
	}
	if q.getAllBlockStmt != nil {
		if cerr := q.getAllBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllBlockStmt: %w", cerr)
		}
	}
	if q.getAllTxnStmt != nil {
		if cerr := q.getAllTxnStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllTxnStmt: %w", cerr)
		}
	}
	if q.getListWalletStmt != nil {
		if cerr := q.getListWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListWalletStmt: %w", cerr)
		}
	}
	if q.getNotProcessBlockStmt != nil {
		if cerr := q.getNotProcessBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNotProcessBlockStmt: %w", cerr)
		}
	}
	if q.getOneBlockStmt != nil {
		if cerr := q.getOneBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOneBlockStmt: %w", cerr)
		}
	}
	if q.getOneTxnStmt != nil {
		if cerr := q.getOneTxnStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOneTxnStmt: %w", cerr)
		}
	}
	if q.updateBlockProcessStmt != nil {
		if cerr := q.updateBlockProcessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBlockProcessStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                     DBTX
	tx                     *sql.Tx
	addBlockStmt           *sql.Stmt
	addTxnStmt             *sql.Stmt
	createWalletStmt       *sql.Stmt
	getAllBlockStmt        *sql.Stmt
	getAllTxnStmt          *sql.Stmt
	getListWalletStmt      *sql.Stmt
	getNotProcessBlockStmt *sql.Stmt
	getOneBlockStmt        *sql.Stmt
	getOneTxnStmt          *sql.Stmt
	updateBlockProcessStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                     tx,
		tx:                     tx,
		addBlockStmt:           q.addBlockStmt,
		addTxnStmt:             q.addTxnStmt,
		createWalletStmt:       q.createWalletStmt,
		getAllBlockStmt:        q.getAllBlockStmt,
		getAllTxnStmt:          q.getAllTxnStmt,
		getListWalletStmt:      q.getListWalletStmt,
		getNotProcessBlockStmt: q.getNotProcessBlockStmt,
		getOneBlockStmt:        q.getOneBlockStmt,
		getOneTxnStmt:          q.getOneTxnStmt,
		updateBlockProcessStmt: q.updateBlockProcessStmt,
	}
}
