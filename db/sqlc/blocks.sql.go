// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: blocks.sql

package db

import (
	"context"
)

const addBlock = `-- name: AddBlock :one
INSERT INTO blocks (
    block_number,
    processed
) VALUES ($1, $2) RETURNING block_number
`

type AddBlockParams struct {
	BlockNumber int32 `json:"block_number"`
	Processed   bool  `json:"processed"`
}

func (q *Queries) AddBlock(ctx context.Context, arg AddBlockParams) (int32, error) {
	row := q.queryRow(ctx, q.addBlockStmt, addBlock, arg.BlockNumber, arg.Processed)
	var block_number int32
	err := row.Scan(&block_number)
	return block_number, err
}

const getAllBlock = `-- name: GetAllBlock :many
SELECT block_number FROM blocks
ORDER BY block_number ASC
`

func (q *Queries) GetAllBlock(ctx context.Context) ([]int32, error) {
	rows, err := q.query(ctx, q.getAllBlockStmt, getAllBlock)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var block_number int32
		if err := rows.Scan(&block_number); err != nil {
			return nil, err
		}
		items = append(items, block_number)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotProcessBlock = `-- name: GetNotProcessBlock :one
SELECT block_number, processed FROM blocks
WHERE processed = $1
ORDER BY block_number ASC
LIMIT 1
`

func (q *Queries) GetNotProcessBlock(ctx context.Context, processed bool) (Blocks, error) {
	row := q.queryRow(ctx, q.getNotProcessBlockStmt, getNotProcessBlock, processed)
	var i Blocks
	err := row.Scan(&i.BlockNumber, &i.Processed)
	return i, err
}

const getOneBlock = `-- name: GetOneBlock :one
SELECT block_number FROM blocks
WHERE block_number = $1
ORDER BY block_number ASC
LIMIT 1
`

func (q *Queries) GetOneBlock(ctx context.Context, blockNumber int32) (int32, error) {
	row := q.queryRow(ctx, q.getOneBlockStmt, getOneBlock, blockNumber)
	var block_number int32
	err := row.Scan(&block_number)
	return block_number, err
}

const updateBlockProcess = `-- name: UpdateBlockProcess :one
UPDATE blocks
SET 
    processed = $2
WHERE block_number = $1 RETURNING block_number, processed
`

type UpdateBlockProcessParams struct {
	BlockNumber int32 `json:"block_number"`
	Processed   bool  `json:"processed"`
}

func (q *Queries) UpdateBlockProcess(ctx context.Context, arg UpdateBlockProcessParams) (Blocks, error) {
	row := q.queryRow(ctx, q.updateBlockProcessStmt, updateBlockProcess, arg.BlockNumber, arg.Processed)
	var i Blocks
	err := row.Scan(&i.BlockNumber, &i.Processed)
	return i, err
}
